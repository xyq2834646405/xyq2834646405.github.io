{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2024-12-03T14:54:37.000Z","updated":"2024-12-03T14:54:47.121Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Lombok","slug":"Lombok","date":"2024-12-03T01:23:45.000Z","updated":"2024-12-03T13:55:41.157Z","comments":true,"path":"2024/12/03/Lombok/","permalink":"http://example.com/2024/12/03/Lombok/","excerpt":"","text":"使用Lombok需要maven引入对应的依赖 12345&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;1.18.26&lt;/version&gt;&lt;/dependency&gt; 构造对象类型 @AllArgsConstructor：全参构造，不管什么类型 @NoArgsConstructor：无参构造 @RequiredArgsConstructor：生成构建方法，类被final修饰和@NonNull注解的字段 @Builder：构建模式构建对象 使用对象类型 @Getter：生成所有字段的get方法 @Setter：生成所有字段的set方法 @ToString：生成类的toString方法 @EqualsAndHashCode：重写类的Equals和HashCode方法 @Data：实现@Getter、@Setter、@ToString、@EqualsAndHashCode所有的操作 @Accessors(chain = true)：链式编程， 日志类型 @Log、@Log4j、@Log4j2、@Slf4j 针对不同的日志实现产品，有不同的日志注解，按照系统的需求使用。 资源关闭类型 @CleanUp：自动关闭资源，例如IO流对象 异常抛出类型 @SneakyThrows：对方法中异常进行捕获并抛出 Lombok的坑 @Data帮你生成了equals的方法，他的equals的方法只会帮你比较当前类对象的属性，不会比较父类的属性，这个时候本该不等的对象，变成了相等。 解决方案：@EqualsAndHashCode(callSuper = true)，用这个生成，equals比较的时候会顺便比较父类的equals。 @Getter和@Setter当出现第一个子母小写第二个字符大写的时候，生成的setter&#x2F;getter方法，与mybatis获取属性的方法会出现冲突。 如：sName，生成getSName、setSName，但是mybati中获取正确的属性名为sName。 解决方案：用idea手动生成setter&#x2F;getter方法或避免使用这种命名方式。 @Accessors(chain &#x3D; true)与excel导出工具（如：easyExcel）使用有冲突 @Accessors(chain &#x3D; true)会将setter方法的放回置为当前类型，而不是void，在easyExcel中使用cglib做为反射工具包的。cglib的rt.jar中的Introspector，这个类来获取get和set的方法和属性。Introspector类中的实现，在判断setXXX方法加了一个判断，返回值是否为Void，此时和@Accessors(chain &#x3D; true)冲突了。 解决方案：不用@Accessors(chain &#x3D; true) @Builder默认值问题，在lombok1.18.4之前字段加上默认值，通过build构建出来的对象没有复制。 解决方案：属性上加@Builder.Defafult或@Builder(toBuilder = true) @Builder和@Data不能同时使用，会导致有一些方法没有自动生成","categories":[],"tags":[{"name":"Lombok","slug":"Lombok","permalink":"http://example.com/tags/Lombok/"}]},{"title":"Mybatis Plus多数据源","slug":"Mybatis-Plus多数据源","date":"2024-11-13T16:25:28.000Z","updated":"2024-11-14T16:35:33.707Z","comments":true,"path":"2024/11/14/Mybatis-Plus多数据源/","permalink":"http://example.com/2024/11/14/Mybatis-Plus%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/","excerpt":"","text":"添加依赖12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;dynamic-datasource-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.5.0&lt;/version&gt;&lt;/dependency&gt; 添加配置文件12345678910111213141516171819spring: # 配置数据源信息 datasource: dynamic: # 设置默认的数据源或者数据源组,默认值即为master primary: master # 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源 strict: false datasource: master: url: jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 123456 slave_1: url: jdbc:mysql://localhost:3306/mybatis_plus_1?characterEncoding=utf8&amp;useSSL=false driver-class-name: com.mysql.cj.jdbc.Driver username: root password: 123456 service层添加注解12345@DS(&quot;slave_1&quot;)@Servicepublic class ProductServiceImpl extends ServiceImpl&lt;ProductMapper, Product&gt;implements ProductService &#123;&#125; 多数据源事务在业务方法上加@DSTransactional(rollbackFor = Exception.class)即可","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://example.com/tags/Mybatis/"}]},{"title":"Mybatis Plus","slug":"Mybatis-Plus","date":"2024-11-13T16:15:32.000Z","updated":"2024-11-14T16:35:33.704Z","comments":true,"path":"2024/11/14/Mybatis-Plus/","permalink":"http://example.com/2024/11/14/Mybatis-Plus/","excerpt":"","text":"简介MyBatis-Plus（简称 MP）是一个 MyBatis的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。 特性 无侵入：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑 损耗小：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作 强大的 CRUD 操作：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求 支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错 支持主键自动生成：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题 支持 ActiveRecord 模式：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作 支持自定义全局通用操作：支持全局通用方法注入（ Write once, use anywhere ） 内置代码生成器：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用 内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询 分页插件支持多种数据库：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库 内置性能分析插件：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询 内置全局拦截插件：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作 相关地址官方地址: http://mp.baomidou.com 代码发布地址: Github: https://github.com/baomidou/mybatis-plus Gitee: https://gitee.com/baomidou/mybatis-plus 文档发布地址: https://baomidou.com/pages/24112f 添加依赖12345&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt;&lt;/dependency&gt; 添加配置文件12345678910spring: # 配置数据源信息 datasource: # 配置数据源类型 type: com.zaxxer.hikari.HikariDataSource # 配置连接数据库信息 driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf8&amp;useSSL=false username: root password: 123456 注： 123456789# MySQL5.7版本的url：url: jdbc:mysql://localhost:3306/mybatis_plus?characterEncoding=utf-8&amp;useSSL=false# MySQL8.0版本的url：url: jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8&amp;useSSL=false# spring boot 2.0（内置jdbc5驱动），驱动类使用：driver-class-name: com.mysql.jdbc.Driver# spring boot 2.1及以上（内置jdbc8驱动），驱动类使用：driver-class-name: com.mysql.cj.jdbc.Driver 启动类配置1@MapperScan(&quot;com.xq.mybatisplus.mapper&quot;) 在Spring Boot启动类中添加@MapperScan注解，扫描mapper包 mapper1public interface 对象Mapper extends BaseMapper&lt;对象&gt; &#123;&#125; BaseMapper123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125public interface BaseMapper&lt;T&gt; extends Mapper&lt;T&gt; &#123; /** * 插入一条记录 * * @param entity 实体对象 */ int insert(T entity); /** * 根据 ID 删除 * * @param id 主键ID */ int deleteById(Serializable id); /** * 根据 columnMap 条件，删除记录 * * @param columnMap 表字段 map 对象 */ int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); /** * 根据 entity 条件，删除记录 * * @param queryWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句） */ int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 删除（根据ID 批量删除） * * @param idList 主键ID列表(不能为 null 以及 empty) */ int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); /** * 根据 ID 修改 * * @param entity 实体对象 */ int updateById(@Param(Constants.ENTITY) T entity); /** * 根据 whereEntity 条件，更新记录 * * @param entity 实体对象 (set 条件值,可以为 null) * @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句） */ int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; updateWrapper); /** * 根据 ID 查询 * * @param id 主键ID */ T selectById(Serializable id); /** * 查询（根据ID 批量查询） * * @param idList 主键ID列表(不能为 null 以及 empty) */ List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList); /** * 查询（根据 columnMap 条件） * * @param columnMap 表字段 map 对象 */ List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap); /** * 根据 entity 条件，查询一条记录 * * @param queryWrapper 实体对象封装操作类（可以为 null） */ T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 Wrapper 条件，查询总记录数 * * @param queryWrapper 实体对象封装操作类（可以为 null） */ Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 entity 条件，查询全部记录 * * @param queryWrapper 实体对象封装操作类（可以为 null） */ List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 Wrapper 条件，查询全部记录 * * @param queryWrapper 实体对象封装操作类（可以为 null） */ List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 Wrapper 条件，查询全部记录 * &lt;p&gt;注意： 只返回第一个字段的值&lt;/p&gt; * * @param queryWrapper 实体对象封装操作类（可以为 null） */ List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 entity 条件，查询全部记录（并翻页） * * @param page 分页查询条件（可以为 RowBounds.DEFAULT） * @param queryWrapper 实体对象封装操作类（可以为 null） */ &lt;E extends IPage&lt;T&gt;&gt; E selectPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper); /** * 根据 Wrapper 条件，查询全部记录（并翻页） * * @param page 分页查询条件 * @param queryWrapper 实体对象封装操作类 */ &lt;E extends IPage&lt;Map&lt;String, Object&gt;&gt;&gt; E selectMapsPage(E page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#125; 常用注解@TableName若实体类类型的类名和要操作的表的表名不一致时时使用 @TableId将其标识为主键 type属性： IdType.ASSIGN_ID：默认，基于雪花算法的策略生成数据id，与数据库id是否设置自增无关 IdType.AUTO：使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，否则无效 @TableField 实体属性和字段名不一样 实体属性不和数据库一一关联 @TableLogic逻辑删除 @Vesion乐观锁插件，修改的时候会帮你带上版本号，需要在mybatis配置文件里面添加对应的配置，配置文件写在分页里面，可查看下方 12//添加乐观锁插件interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); 条件构造器 分页插件添加配置文件 1234567891011121314151617@Configurationpublic class MybatisPlusConfig &#123; /** * 分页插件 */ @Bean public MybatisPlusInterceptor performanceInterceptor() &#123; MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); //添加分页插件 interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL)); //添加乐观锁插件 interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor()); return interceptor; &#125;&#125; 代码生成器添加依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt; &lt;version&gt;3.5.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.freemarker&lt;/groupId&gt; &lt;artifactId&gt;freemarker&lt;/artifactId&gt; &lt;version&gt;2.3.31&lt;/version&gt;&lt;/dependency&gt; 添加代码 1234567891011121314151617181920FastAutoGenerator.create(&quot;jdbc:mysql://127.0.0.1:3306/mybatis_plus? characterEncoding=utf-8&amp;userSSL=false&quot;, &quot;root&quot;, &quot;123456&quot;) .globalConfig(builder -&gt; &#123; builder.author(&quot;atguigu&quot;) // 设置作者// .enableSwagger() // 开启 swagger 模式 .fileOverride() // 覆盖已生成文件 .outputDir(&quot;D://mybatis_plus&quot;); // 指定输出目录 &#125;) .packageConfig(builder -&gt; &#123; builder .parent(&quot;com.atguigu&quot;) // 设置父包名 .moduleName(&quot;mybatisplus&quot;) // 设置父包模块名 .pathInfo(Collections.singletonMap(OutputFile.mapperXml, &quot;D://mybatis_plus&quot;));// 设置mapperXml生成路径 &#125;) .strategyConfig(builder -&gt; &#123; builder .addInclude(&quot;t_user&quot;) // 设置需要生成的表名 .addTablePrefix(&quot;t_&quot;, &quot;c_&quot;); // 设置过滤表前缀 &#125;) .templateEngine(new FreemarkerTemplateEngine()) // 使用Freemarker 引擎模板，默认的是Velocity引擎模板 .execute();","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://example.com/tags/Mybatis/"}]},{"title":"Mybatis批量新增和修改","slug":"Mybatis批量新增和修改","date":"2024-11-13T16:09:51.000Z","updated":"2024-11-14T16:35:33.707Z","comments":true,"path":"2024/11/14/Mybatis批量新增和修改/","permalink":"http://example.com/2024/11/14/Mybatis%E6%89%B9%E9%87%8F%E6%96%B0%E5%A2%9E%E5%92%8C%E4%BF%AE%E6%94%B9/","excerpt":"","text":"批量操作的时候可以在mysql数据库连接池添加allowMultiQueries=true 1url: jdbc:mysql://localhost:3306/test_db?allowMultiQueries=true 即可使用批量操作(新增同理) 1234567&lt;update id=&quot;batchUpdate&quot;&gt; &lt;foreach collection=&quot;list&quot; item=&quot;item&quot; index=&quot;index&quot; open=&quot;&quot; close=&quot;&quot; separator=&quot;;&quot;&gt; UPDATE user_t SET user_name = #&#123;item.userName&#125; WHERE id= #&#123;item.id&#125; &lt;/foreach&gt;&lt;/update&gt;","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://example.com/tags/Mybatis/"}]},{"title":"Linux版Nginx配置https","slug":"Linux版Nginx配置https","date":"2024-11-13T15:17:21.000Z","updated":"2024-11-14T16:35:33.699Z","comments":true,"path":"2024/11/13/Linux版Nginx配置https/","permalink":"http://example.com/2024/11/13/Linux%E7%89%88Nginx%E9%85%8D%E7%BD%AEhttps/","excerpt":"","text":"配置文件修改123456# 进入nginx配置文件目录/usr/local/nginx/conf# 备份默认配置cp nginx.conf nginx.conf.default# 修改配置文件vim nginx.conf 阿里云生成证书与配置 数字证书管理服务-&gt;证书管理-&gt;SSL证书管理-&gt;个人测试证书（原免费证书）-&gt;立即购买 创建证书，填写自己的域名（有www的和没有www的） 点击更多-&gt;下载-&gt;nginx类型 将pem&#x2F;key文件放到nginx.conf同级目录下 修改nginx.conf的内容 修改下面的server_name、ssl_certificate、ssl_certificate_key、proxy_pass即可 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; # 防DDoS配置 limit_req_zone $binary_remote_addr zone=ddos:10m rate=10r/s; server &#123; # 监听端口 listen 80; # 域名 server_name 域名地址; # 配置SSL/TLS listen 443 ssl; server_name 域名地址; ssl_certificate 域名.pem; ssl_certificate_key 域名.key; # 配置SSL会话缓存 ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # 配置SSL协议版本和密码套件 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 启用HSTS标头，告诉浏览器始终使用HTTPS add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;; # 防止点击劫持 add_header X-Frame-Options SAMEORIGIN; # 安全头部配置 add_header X-Content-Type-Options &quot;nosniff&quot;; add_header X-XSS-Protection &quot;1; mode=block&quot;; add_header X-Frame-Options &quot;SAMEORIGIN&quot;; location / &#123; proxy_pass http://域名的ip:端口; &#125; &#125;&#125; 重新加载nginx.conf配置文件./nginx -s reload 域名访问验证即可","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"Linux安装nginx","slug":"Linux安装nginx","date":"2024-11-13T12:27:12.000Z","updated":"2024-11-14T16:35:33.697Z","comments":true,"path":"2024/11/13/Linux安装nginx/","permalink":"http://example.com/2024/11/13/Linux%E5%AE%89%E8%A3%85nginx/","excerpt":"","text":"安装nginx依赖1yum -y install gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel 安装wget1yum -y install wget 创建nginx安装目录1mkdir /usr/local/nginx 下载nginx1wget https://nginx.org/download/nginx-1.8.0.tar.gz 解压nginx压缩包1tar -xvf nginx-1.8.0.tar.gz 进入nginx目录进行配置配置nginx(考虑到后续安装SSL证书，添加两个模块) –with-http_stub_status_module：用来监控 Nginx 的当前状态 –with-http_ssl_module：使用https协议模块。默认情况下，该模块没有被构建。前提是openssl与openssl-devel已安装 1./configure --with-http_stub_status_module --with-http_ssl_module 编译与安装1234# 编译make# 安装make install 启动nginx12345678910# 查找nginx安装目录whereis nginx# 切换到对应的目录cd /usr/local/nginx/sbin/# 启动nginx./nginx# 验证nginx是否启动成功 方法一curl http://localhost:80# 验证nginx是否启动成功 方法二ps -ef | grep nginx 关闭防火墙123# 关闭防火墙systemctl stop firewalld# 注：如果是服务器的话对安全组进行修改就可以了 常用操作12345678# 启动./nginx# 关闭./nginx -s stop# 重启./nginx -s reopen# 重新加载配置文件./nginx -s reload","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"}]},{"title":"window端口占用","slug":"window端口占用","date":"2024-11-13T12:13:06.000Z","updated":"2024-11-14T16:35:33.708Z","comments":true,"path":"2024/11/13/window端口占用/","permalink":"http://example.com/2024/11/13/window%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/","excerpt":"","text":"查找对应的端口1netstat -ano | findstr 端口号 注：展示的最后一列就是对应的线程号 删除对应的线程1taskkill /T /F /PID 线程号","categories":[],"tags":[{"name":"window","slug":"window","permalink":"http://example.com/tags/window/"}]},{"title":"Mybatis分页插件手写count查询","slug":"Mybatis分页插件手写count查询","date":"2024-11-12T12:59:37.000Z","updated":"2024-11-12T13:36:33.572Z","comments":true,"path":"2024/11/12/Mybatis分页插件手写count查询/","permalink":"http://example.com/2024/11/12/Mybatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E6%89%8B%E5%86%99count%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"注，手写需要mybatis版本的支持，必须再&gt;&#x3D;5.0.4版本才可以 对应官网的文献地址：https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/Changelog.md 在mapper中增加对应的分页方法，分页方法名字+_COUNT ，返回值为Long类型，然后在对应的xml文件中生成对应的方法，然后写对应的查询方法，通常是重新首先都是为了剔除没必要的关联查询，提高其查询的速度 mapper.java改造 1234567public interface xxxMapper&#123; //查询方法 List&lt;?&gt; query(ParamObject queryParam); //统计的方法 Long query_COUNT(ParamObject queryParam);&#125; mapper.xml改造 12345678910&lt;select id=&quot;query&quot; resultType=&quot;ParamObject&quot;&gt; select * from xxx &lt;where&gt;...&lt;/where&gt;&lt;/select&gt;&lt;select id=&quot;query_COUNT&quot; resultType=&quot;Long&quot;&gt; select count(有索引的列) from xxx &lt;where&gt;...&lt;/where&gt;&lt;/select&gt;","categories":[],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"http://example.com/tags/Mybatis/"}]},{"title":"Hello World","slug":"hello-world","date":"2024-11-11T17:40:47.722Z","updated":"2024-11-11T17:40:47.722Z","comments":true,"path":"2024/11/12/hello-world/","permalink":"http://example.com/2024/11/12/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"IDEA设置VM内存大小","slug":"IDEA设置VM内存大小","date":"2024-11-11T09:32:53.000Z","updated":"2024-11-12T13:36:38.705Z","comments":true,"path":"2024/11/11/IDEA设置VM内存大小/","permalink":"http://example.com/2024/11/11/IDEA%E8%AE%BE%E7%BD%AEVM%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"idea设置的low memory内存不足报错 IDEA展示vm大小显示 IDEA设置vm大小win+R输入cmd 1234567SET VM_OPTIONS_FILE=SET USER_VM_OPTIONS_FILE=IF NOT &quot;%IDEA_VM_OPTIONS%&quot; == &quot;&quot; ( :: 1. %&lt;IDE_NAME&gt;_VM_OPTIONS% echo &quot;%IDEA_VM_OPTIONS%&quot; IF EXIST &quot;%IDEA_VM_OPTIONS%&quot; SET &quot;VM_OPTIONS_FILE=%IDEA_VM_OPTIONS%&quot;) idea的配置文件 将文件中的Xms和Xmx进行修改 12-Xms4096m-Xmx8192m","categories":[],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"http://example.com/tags/IDEA/"}]},{"title":"Linux安装rabbitMQ","slug":"Linux安装rabbitMQ","date":"2024-11-01T09:29:40.000Z","updated":"2024-11-14T16:35:33.698Z","comments":true,"path":"2024/11/01/Linux安装rabbitMQ/","permalink":"http://example.com/2024/11/01/Linux%E5%AE%89%E8%A3%85rabbitMQ/","excerpt":"","text":"本教程用的是centos7系统 RabbitMQ是一个开源的遵循AMQP协议实现的基于Erlang语言编写，即需要先安装部署Erlang环境再安装RabbitMQ环境。 安装Erlang官网：https://packagecloud.io/rabbitmq/rabbitmq-server 下载脚本： 1wget --content-disposition https://packagecloud.io/rabbitmq/erlang/packages/el/7/erlang-22.3.4.12-1.el7.x86_64.rpm/download.rpm 本地安装： 1yum localinstall erlang-22.3.4.12-1.el7.x86_64.rpm 安装RabbitMQ下载脚本 1wget --content-disposition https://packagecloud.io/rabbitmq/rabbitmq-server/packages/el/7/rabbitmq-server-3.8.13-1.el7.noarch.rpm/download.rpm 运行下面的命令来将 Key 导入，执行命令： 1rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc 注：此处有可能下载失败，因为这个是外网你可以连接vpn去下载丢到服务器上执行，此处脚本可以改成 1rpm --import rabbitmq-release-signing-key.asc 本地安装 1yum localinstall rabbitmq-server-3.8.13-1.el7.noarch.rpm 启动mq 1systemctl start rabbitmq-server 设置开机自启 1systemctl enable rabbitmq-server 安装RabbitMQ界面管理安装脚本： 123456789101112131415rabbitmq-plugins enable rabbitmq_management# Enabling plugins on node rabbit@VM-8-17-centos:# rabbitmq_management# The following plugins have been configured:# rabbitmq_management# rabbitmq_management_agent# rabbitmq_web_dispatch# Applying plugin configuration to rabbit@VM-8-17-centos...# The following plugins have been enabled:# rabbitmq_management# rabbitmq_management_agent# rabbitmq_web_dispatch# # set 3 plugins.# Offline change; changes will take effect at broker restart. 此界面管理需要重启rabbitmq 1systemctl restart rabbitmq-server 日常使用需要开通1567端口和15672端口才可以进行使用 123456789101112#状态systemctl status rabbitmq-server#启动systemctl start rabbitmq-server#停止systemctl stop rabbitmq-server#重启systemctl restart rabbitmq-server#设置用户分配权限rabbitmqctl set_user_tags admin administrator#设置vhost的用户权限rabbitmqctl set_permissions -p / admin &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"mq","slug":"mq","permalink":"http://example.com/tags/mq/"}]}],"categories":[],"tags":[{"name":"Lombok","slug":"Lombok","permalink":"http://example.com/tags/Lombok/"},{"name":"Mybatis","slug":"Mybatis","permalink":"http://example.com/tags/Mybatis/"},{"name":"Linux","slug":"Linux","permalink":"http://example.com/tags/Linux/"},{"name":"window","slug":"window","permalink":"http://example.com/tags/window/"},{"name":"IDEA","slug":"IDEA","permalink":"http://example.com/tags/IDEA/"},{"name":"mq","slug":"mq","permalink":"http://example.com/tags/mq/"}]}